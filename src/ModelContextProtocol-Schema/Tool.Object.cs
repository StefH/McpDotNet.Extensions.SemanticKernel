//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace ModelContextProtocol.Schema;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// Definition for a tool the client can call.
/// </para>
/// </remarks>
public readonly partial struct Tool
    : IJsonObject<ModelContextProtocol.Schema.Tool>
{
    /// <summary>
    /// Conversion from <see cref="ImmutableList{JsonObjectProperty}"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Tool(ImmutableList<JsonObjectProperty> value)
    {
        return new(value);
    }

    /// <summary>
    /// Conversion to <see cref="ImmutableList{JsonObjectProperty}"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator ImmutableList<JsonObjectProperty>(Tool value)
    {
        return
            __CorvusObjectHelpers.GetPropertyBacking(value);
    }

    /// <summary>
    /// Conversion from JsonObject.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Tool(JsonObject value)
    {
        if (value.HasDotnetBacking && value.ValueKind == JsonValueKind.Object)
        {
            return new(
                __CorvusObjectHelpers.GetPropertyBacking(value));
        }

        return new(value.AsJsonElement);
    }

    /// <summary>
    /// Conversion to JsonObject.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator JsonObject(Tool value)
    {
        return
            value.AsObject;
    }

    /// <inheritdoc/>
    public Corvus.Json.JsonAny this[in JsonPropertyName name]
    {
        get
        {
            if (this.TryGetProperty(name, out Corvus.Json.JsonAny result))
            {
                return result;
            }

            throw new InvalidOperationException();
        }
    }

    /// <summary>
    /// Gets the number of properties in the object.
    /// </summary>
    public int Count
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return this.jsonElementBacking.GetPropertyCount();
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return this.objectBacking.Count;
            }

            throw new InvalidOperationException();
        }
    }

    /// <summary>
    /// Gets the (optional) <c>_meta</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// See [specification/2025-06-18/basic/index#general-fields] for notes on _meta usage.
    /// </para>
    /// </remarks>
    public Corvus.Json.JsonObject Meta
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MetaUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Meta, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonObject>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>annotations</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Optional additional tool information.
    /// </para>
    /// <para>
    /// Display name precedence order is: title, annotations.title, then name.
    /// </para>
    /// <para>
    /// Additional properties describing a Tool to clients.
    /// </para>
    /// <para>
    /// NOTE: all properties in ToolAnnotations are **hints**.
    /// </para>
    /// <para>
    /// They are not guaranteed to provide a faithful description of
    /// </para>
    /// <para>
    /// tool behavior (including descriptive properties like `title`).
    /// </para>
    /// <para>
    /// Clients should never make tool use decisions based on ToolAnnotations
    /// </para>
    /// <para>
    /// received from untrusted servers.
    /// </para>
    /// </remarks>
    public ModelContextProtocol.Schema.ToolAnnotations Annotations
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AnnotationsUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Annotations, out JsonAny result))
                {
                    return result.As<ModelContextProtocol.Schema.ToolAnnotations>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>description</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A human-readable description of the tool.
    /// </para>
    /// <para>
    /// This can be used by clients to improve the LLM&#39;s understanding of available tools. It can be thought of like a &quot;hint&quot; to the model.
    /// </para>
    /// </remarks>
    public Corvus.Json.JsonString Description
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DescriptionUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Description, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>inputSchema</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// <para>
    /// A JSON Schema object defining the expected parameters for the tool.
    /// </para>
    /// </remarks>
    public ModelContextProtocol.Schema.Tool.RequiredType InputSchema
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.InputSchemaUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.InputSchema, out JsonAny result))
                {
                    return result.As<ModelContextProtocol.Schema.Tool.RequiredType>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>name</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// <para>
    /// Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn&#39;t present).
    /// </para>
    /// </remarks>
    public Corvus.Json.JsonString Name
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.NameUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Name, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>outputSchema</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// An optional JSON Schema object defining the structure of the tool&#39;s output returned in
    /// </para>
    /// <para>
    /// the structuredContent field of a CallToolResult.
    /// </para>
    /// </remarks>
    public ModelContextProtocol.Schema.Tool.ToolRequiredType OutputSchema
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.OutputSchemaUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.OutputSchema, out JsonAny result))
                {
                    return result.As<ModelContextProtocol.Schema.Tool.ToolRequiredType>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>title</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
    /// </para>
    /// <para>
    /// even by those unfamiliar with domain-specific terminology.
    /// </para>
    /// <para>
    /// If not provided, the name should be used for display (except for Tool,
    /// </para>
    /// <para>
    /// where `annotations.title` should be given precedence over using `name`,
    /// </para>
    /// <para>
    /// if present).
    /// </para>
    /// </remarks>
    public Corvus.Json.JsonString Title
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.TitleUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Title, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <inheritdoc/>
    public static Tool FromProperties(IDictionary<JsonPropertyName, JsonAny> source)
    {
        return new(source.Select(kvp => new JsonObjectProperty(kvp.Key, kvp.Value)).ToImmutableList());
    }

    /// <inheritdoc/>
    public static Tool FromProperties(params (JsonPropertyName Name, JsonAny Value)[] source)
    {
        return new(source.Select(s => new JsonObjectProperty(s.Name, s.Value.AsAny)).ToImmutableList());
    }

    /// <summary>
    /// Creates an instance of the type from the given immutable list of properties.
    /// </summary>
    /// <param name="source">The list of properties.</param>
    /// <returns>An instance of the type initialized from the list of properties.</returns>
    public static Tool FromProperties(ImmutableList<JsonObjectProperty> source)
    {
        return new(source);
    }

    /// <summary>
    /// Creates an instance of a <see cref="Tool"/>.
    /// </summary>
    public static Tool Create(
        in ModelContextProtocol.Schema.Tool.RequiredType inputSchema,
        in Corvus.Json.JsonString name,
        in Corvus.Json.JsonObject? meta = null,
        in ModelContextProtocol.Schema.ToolAnnotations? annotations = null,
        in Corvus.Json.JsonString? description = null,
        in ModelContextProtocol.Schema.Tool.ToolRequiredType? outputSchema = null,
        in Corvus.Json.JsonString? title = null)
    {
        var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
        builder.Add(JsonPropertyNames.InputSchema, inputSchema.AsAny);
        builder.Add(JsonPropertyNames.Name, name.AsAny);

        if (meta is not null)
        {
            builder.Add(JsonPropertyNames.Meta, meta.Value.AsAny);
        }

        if (annotations is not null)
        {
            builder.Add(JsonPropertyNames.Annotations, annotations.Value.AsAny);
        }

        if (description is not null)
        {
            builder.Add(JsonPropertyNames.Description, description.Value.AsAny);
        }

        if (outputSchema is not null)
        {
            builder.Add(JsonPropertyNames.OutputSchema, outputSchema.Value.AsAny);
        }

        if (title is not null)
        {
            builder.Add(JsonPropertyNames.Title, title.Value.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <inheritdoc/>
    public ImmutableList<JsonObjectProperty> AsPropertyBacking()
    {
        return __CorvusObjectHelpers.GetPropertyBacking(this);
    }
    /// <inheritdoc/>
    public ImmutableList<JsonObjectProperty>.Builder AsPropertyBackingBuilder()
    {
        return __CorvusObjectHelpers.GetPropertyBacking(this).ToBuilder();
    }

    /// <inheritdoc/>
    public JsonObjectEnumerator EnumerateObject()
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            return new(this.jsonElementBacking);
        }

        if ((this.backing & Backing.Object) != 0)
        {
            return new(this.objectBacking);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc/>
    public bool HasProperties()
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.Count > 0;
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            using JsonElement.ObjectEnumerator enumerator = this.jsonElementBacking.EnumerateObject();
            return enumerator.MoveNext();
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(in JsonPropertyName name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return name.TryGetProperty(this.jsonElementBacking, out JsonElement _);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(string name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return this.jsonElementBacking.TryGetProperty(name, out _);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(ReadOnlySpan<char> name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return this.jsonElementBacking.TryGetProperty(name, out _);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(ReadOnlySpan<byte> name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return this.jsonElementBacking.TryGetProperty(name, out _);
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Sets the (optional) <c>_meta</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    /// <remarks>
    /// <para>
    /// See [specification/2025-06-18/basic/index#general-fields] for notes on _meta usage.
    /// </para>
    /// </remarks>
    public Tool WithMeta(in Corvus.Json.JsonObject value)
    {
        return this.SetProperty(JsonPropertyNames.Meta, value);
    }

    /// <summary>
    /// Sets the (optional) <c>annotations</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    /// <remarks>
    /// <para>
    /// Optional additional tool information.
    /// </para>
    /// <para>
    /// Display name precedence order is: title, annotations.title, then name.
    /// </para>
    /// <para>
    /// Additional properties describing a Tool to clients.
    /// </para>
    /// <para>
    /// NOTE: all properties in ToolAnnotations are **hints**.
    /// </para>
    /// <para>
    /// They are not guaranteed to provide a faithful description of
    /// </para>
    /// <para>
    /// tool behavior (including descriptive properties like `title`).
    /// </para>
    /// <para>
    /// Clients should never make tool use decisions based on ToolAnnotations
    /// </para>
    /// <para>
    /// received from untrusted servers.
    /// </para>
    /// </remarks>
    public Tool WithAnnotations(in ModelContextProtocol.Schema.ToolAnnotations value)
    {
        return this.SetProperty(JsonPropertyNames.Annotations, value);
    }

    /// <summary>
    /// Sets the (optional) <c>description</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    /// <remarks>
    /// <para>
    /// A human-readable description of the tool.
    /// </para>
    /// <para>
    /// This can be used by clients to improve the LLM&#39;s understanding of available tools. It can be thought of like a &quot;hint&quot; to the model.
    /// </para>
    /// </remarks>
    public Tool WithDescription(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(JsonPropertyNames.Description, value);
    }

    /// <summary>
    /// Sets the <c>inputSchema</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    /// <remarks>
    /// <para>
    /// A JSON Schema object defining the expected parameters for the tool.
    /// </para>
    /// </remarks>
    public Tool WithInputSchema(in ModelContextProtocol.Schema.Tool.RequiredType value)
    {
        return this.SetProperty(JsonPropertyNames.InputSchema, value);
    }

    /// <summary>
    /// Sets the <c>name</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    /// <remarks>
    /// <para>
    /// Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn&#39;t present).
    /// </para>
    /// </remarks>
    public Tool WithName(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(JsonPropertyNames.Name, value);
    }

    /// <summary>
    /// Sets the (optional) <c>outputSchema</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    /// <remarks>
    /// <para>
    /// An optional JSON Schema object defining the structure of the tool&#39;s output returned in
    /// </para>
    /// <para>
    /// the structuredContent field of a CallToolResult.
    /// </para>
    /// </remarks>
    public Tool WithOutputSchema(in ModelContextProtocol.Schema.Tool.ToolRequiredType value)
    {
        return this.SetProperty(JsonPropertyNames.OutputSchema, value);
    }

    /// <summary>
    /// Sets the (optional) <c>title</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    /// <remarks>
    /// <para>
    /// Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
    /// </para>
    /// <para>
    /// even by those unfamiliar with domain-specific terminology.
    /// </para>
    /// <para>
    /// If not provided, the name should be used for display (except for Tool,
    /// </para>
    /// <para>
    /// where `annotations.title` should be given precedence over using `name`,
    /// </para>
    /// <para>
    /// if present).
    /// </para>
    /// </remarks>
    public Tool WithTitle(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(JsonPropertyNames.Title, value);
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(in JsonPropertyName name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(string name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(ReadOnlySpan<byte> name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(in JsonPropertyName name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(string name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(ReadOnlySpan<char> name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(ReadOnlySpan<byte> name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public Tool SetProperty<TValue>(in JsonPropertyName name, TValue value)
        where TValue : struct, IJsonValue
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWith(this, name, value.AsAny));
    }

    /// <inheritdoc />
    public Tool RemoveProperty(in JsonPropertyName name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <inheritdoc />
    public Tool RemoveProperty(string name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <inheritdoc />
    public Tool RemoveProperty(ReadOnlySpan<char> name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <inheritdoc />
    public Tool RemoveProperty(ReadOnlySpan<byte> name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <summary>
    /// Provides UTF8 and string versions of the JSON property names on the object.
    /// </summary>
    public static class JsonPropertyNames
    {
        /// <summary>
        /// Gets the JSON property name for <see cref="Meta"/>.
        /// </summary>
        public const string Meta = "_meta";

        /// <summary>
        /// Gets the JSON property name for <see cref="Annotations"/>.
        /// </summary>
        public const string Annotations = "annotations";

        /// <summary>
        /// Gets the JSON property name for <see cref="Description"/>.
        /// </summary>
        public const string Description = "description";

        /// <summary>
        /// Gets the JSON property name for <see cref="InputSchema"/>.
        /// </summary>
        public const string InputSchema = "inputSchema";

        /// <summary>
        /// Gets the JSON property name for <see cref="Name"/>.
        /// </summary>
        public const string Name = "name";

        /// <summary>
        /// Gets the JSON property name for <see cref="OutputSchema"/>.
        /// </summary>
        public const string OutputSchema = "outputSchema";

        /// <summary>
        /// Gets the JSON property name for <see cref="Title"/>.
        /// </summary>
        public const string Title = "title";

        /// <summary>
        /// Gets the JSON property name for <see cref="Meta"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MetaUtf8 => "_meta"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Annotations"/>.
        /// </summary>
        public static ReadOnlySpan<byte> AnnotationsUtf8 => "annotations"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Description"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DescriptionUtf8 => "description"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="InputSchema"/>.
        /// </summary>
        public static ReadOnlySpan<byte> InputSchemaUtf8 => "inputSchema"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Name"/>.
        /// </summary>
        public static ReadOnlySpan<byte> NameUtf8 => "name"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="OutputSchema"/>.
        /// </summary>
        public static ReadOnlySpan<byte> OutputSchemaUtf8 => "outputSchema"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Title"/>.
        /// </summary>
        public static ReadOnlySpan<byte> TitleUtf8 => "title"u8;
    }

    private static class __CorvusObjectHelpers
    {
        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonAny"/> built from the object.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBacking(in Tool that)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking;
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilder(that.jsonElementBacking).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in Tool that, in JsonPropertyName name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in Tool that, ReadOnlySpan<char> name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in Tool that, ReadOnlySpan<byte> name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in Tool that, string name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, with the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWith(in Tool that, in JsonPropertyName name, in JsonAny value)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.SetItem(name, value);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderReplacing(that.jsonElementBacking, name, value).ToImmutable();
            }

            throw new InvalidOperationException();
        }
    }
}
